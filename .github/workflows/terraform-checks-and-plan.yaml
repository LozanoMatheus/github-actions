name: Terraform/Terragrunt checks and plan

on:
  workflow_call:
    inputs:
      workdir:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      terraform_version:
        required: false
        default: 1.3.6
        type: string
      use_terragrunt:
        required: false
        default: false
        type: boolean
      terragrunt_version:
        required: false
        default: 0.42.3
        type: string
      tf_modules_another_private_repo:
        required: false
        default: false
        type: boolean
    secrets:
      aws_iam_role:
        required: true
      aws_profile:
        required: true
      ssh_private_key:
        required: false

jobs:
  terraform-checks:
    name: "Terraform"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.workdir }}

    steps:
      - name: Check Dependencies
        env:
          check_ssh_private_key: ${{ secrets.ssh_private_key != '' }}
        shell: bash
        if: ${{ inputs.tf_modules_another_private_repo == true && env.check_ssh_private_key != 'true' }}
        run: |
          echo 'Please, configure your secret ssh_private_key so GitHub Actions can download the TF modules from a different repository'
          echo 'Check https://stackoverflow.com/a/70283191/2868547 for more information'
          exit 1

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ secrets.aws_iam_role }}

      - name: Set up a new AWS Profile locally
        run: |
          mkdir -p ~/.aws/
          echo '[${{ secrets.aws_profile }}]' >> ~/.aws/credentials
          echo "AWS_ACCESS_KEY_ID = ${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
          echo "AWS_SECRET_ACCESS_KEY = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
          echo "AWS_SESSION_TOKEN = ${AWS_SESSION_TOKEN}" >> ~/.aws/credentials
          sed -i 's/^ *.profile.*"$//' {../,../../}terragrunt.hcl || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: ${{ inputs.use_terragrunt }}

      - name: Setup Terragrunt
        if: inputs.use_terragrunt == true
        run: |
          sudo wget -q -O /bin/t "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ inputs.terragrunt_version }}/terragrunt_linux_amd64"
          sudo chmod +x /bin/t

      - name: Set symbolic link for terraform
        if: inputs.use_terragrunt == false
        run: |
          sudo update-alternatives --install /usr/local/bin/t t $(which terraform) 0

      - name: Terraform Format
        id: fmt
        run: |
          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.ssh_private_key }}'
          t fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: t init
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: t validate
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: t plan -no-color -input=false
        continue-on-error: true

      - name: Write the TF/TG output/results to the PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.workdir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Format Status
        shell: bash
        if: steps.fmt.outcome == 'failure'
        run: exit 1

      - name: Terraform Init Status
        shell: bash
        if: steps.init.outcome == 'failure'
        run: exit 1

      - name: Terraform Validate Status
        shell: bash
        if: steps.validate.outcome == 'failure'
        run: exit 1

      - name: Terraform Plan Status
        shell: bash
        if: steps.plan.outcome == 'failure'
        run: exit 1
